#!/bin/bash
#
# Usage is `./wallah/bin/clone_python [target_directory]`
#
# This will download [virtualenv](https://github.com/pypa/virtualenv) and use
# that to create a clone of your existing python installation in the target
# directory.
#
# If target directory is not provided, it will default to a directory called
# "python" in the current directory.
#
# We don't download and install python because
# [AFAIK](http://www.python.org/download/) there are no good pre-built binary
# distributions available for OSX and Linux that are relocateable. Also,
# building reliably from source is extremely difficult to automate and support
# many platforms/configurations, very slow, and requires many low-level
# development tools and libraries. So due to these realities we must
# assume your OS already has python installed and we use virtualenv to make a
# project-specific isolated clone of it.

clone_python() {
  echo "python not installed in directory $(pwd -P), creating a virtualenv clone..."
  local virtualenv_version="1.10.1"
  local archive="virtualenv-${virtualenv_version}.tar.gz"
  curl --silent \
    "https://pypi.python.org/packages/source/v/virtualenv/${archive}" \
    | tar --extract --gzip --file -
  mv "./virtualenv-${virtualenv_version}" ./virtualenv
  python ./virtualenv/virtualenv.py .
  python ./virtualenv/virtualenv.py --relocatable .
}

main() {
  #sigh. http://mywiki.wooledge.org/BashFAQ/028
  wallah_bin=$(cd $(dirname "$0") && pwd)

  python_root="$1"
  if [[ -z "${python_root}" ]]; then
    python_root="${wallah_bin}/../../python"
  fi

  if [[ -x "${python_root}/bin/python" ]]; then
    #all good
    exit 0
  fi

  if ! "${wallah_bin}/check_prerequisites" curl tar python; then
    exit 2
  fi

  mkdir -p "${python_root}"
  (cd "${python_root}" && clone_python)
}

main "$@"
